" Sample .vimrc file by Martin Brochhaus
" Presented at PyCon APAC 2012
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" System Settings  ----------------------------------------------------------{{{
" vim-gitgutter needs reasonably fast updatetime. Default 4s is too slow.
set updatetime=250
" Enable syntax highlighting
" You need to reload this file for the change to apply
filetype off
filetype plugin indent on
syntax on
" place cursor inside an xml/html tag, press % to jump to the matching one.
runtime macros/matchit.vim
set relativenumber  " show line numbers
set number  " show line numbers
set tw=79   " width of document (used by gd)
set nowrap  " don't automatically wrap on load
set fo-=t   " don't automatically wrap text when typing
set colorcolumn=80
highlight ColorColumn ctermbg=233
set history=700
set undolevels=700
set tabstop=4
set softtabstop=4
set shiftwidth=4
set shiftround
set expandtab
" Treat '-' as part of the word rather than a word separator.
" set iskeyword+=-
set iskeyword+=
set encoding=utf-8
set fileencoding=utf-8
" Define order of searches for word completion. kspell will add
" dictionary search only if ":set[local] spell" is enabled.
set complete=.,w,b,u,t,i,kspell
" Automatic reloading of .vimrc
autocmd! bufwritepost .vimrc source %
" Better copy & paste
" When you want to paste large blocks of code into vim, press F2 before you
" paste. At the bottom you should see ``-- INSERT (paste) --``.
set pastetoggle=<F2>
" set clipboard=unnamed
set clipboard=unnamedplus
" Mouse and backspace
set mouse=a  " on OSX press ALT and click
set bs=2     " make backspace behave like normal again
" Slow ESC fix according to https://www.johnhawthorn.com/2012/09/vi-escape-delays/
" This delay exists because many keys (arrows keys, ALT) rely on it as an escape character.
" timeoutlen is used for mapping delays
" ttimeoutlen is used for key code delays
" set timeoutlen=1000 ttimeoutlen=10
set timeoutlen=1000 ttimeoutlen=0
" Show whitespace
" MUST be inserted BEFORE the colorscheme command
autocmd ColorScheme * highlight ExtraWhitespace ctermbg=red guibg=red
au InsertLeave * match ExtraWhitespace /\s\+$/
syntax enable
let base16colorspace=256
set background=dark
let g:seoul256_background=236
let g:seoul256_srgb=1
colorscheme seoul256
"}}}

" System mappings  ----------------------------------------------------------{{{
" backspace in normal mode
nnoremap <bs> X
" Rebind <Leader> key
let mapleader = ","
" Toggle spell checking on and off with `,z`
" normal mode
nmap <silent> <leader>z :setlocal spell! spelllang=en_us<CR>
" insert mode
imap <F5> <C-o>:setlocal spell! spelllang=en_us<CR>
"inoremap <F5> <C-\><C-O>:setlocal spelllang=en_us spell! spell?<CR>
"" nnoremap <Leader>s a<CR><Esc>k$
" cut the line under cusor
nnoremap <Leader>s i<CR><Esc>^
" Add a space in normal mode and move to the right.
"nnoremap <Leader>q i <Esc>l
" Add a # in normal mode and move to the right.
"nnoremap <Leader>q i#<Esc>
" Removes highlight of your last search
noremap <C-n> :nohl<CR>
vnoremap <C-n> :nohl<CR>
" inoremap <C-n> :nohl<CR>
" help ins-special-special
" This breaks undo at each line break. It also expands abbreviations before this.
inoremap <CR> <C-]><C-G>u<CR>
inoremap <C-w> <C-G>u<C-w>
inoremap <C-u> <C-G>u<C-u>
" <C-c> does not check for abbreviations and does not trigger InsertLeave.
inoremap <C-c> <Esc><Esc>
" Quicksave command
noremap <C-Z> :update<CR>
vnoremap <C-Z> <C-C>:update<CR>
" this  would save and go back to insert mode.
" inoremap <C-Z> <C-O>:update<CR>
" this  would save and exit insert mode.
inoremap <C-Z> <C-C>:update<CR>
" Quick quit command
noremap <Leader>e :quit<CR>  " Quit current window
noremap <Leader>E :qa!<CR>   " Quit all windows
" bind Ctrl+<movement> keys to move around the windows, instead of using Ctrl+w + <movement>
" Every unnecessary keystroke that can be saved is good for your health :)
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l
map <C-h> <C-w>h
" easier moving between tabs
" map <Leader>n <esc>:tabprevious<CR>
" map <Leader>m <esc>:tabnext<CR>
" map sort function to a key
"vnoremap <Leader>s :sort<CR>
" FILE FINDING
" Search down into subdirrectories
" Provides tab-comletion for all file-relates tasks
set path+=**
" Display all matching files when we tab complete
set wildmenu
" Hit tab to :find by partial match. Use * to make it fuzzy
" FILE BROWSING, start with :Vex[plore], or :Sex[plore] for horizontal split.
let g:netrw_banner=0   " disable the banner
let g:netrw_list_hide=netrw_gitignore#Hide()
let g:netrw_list_hide=',\(^\|\s\s\)\zs\.\S\+\'
let g:netrw_list_hide=',.*\.pyc$'
" - :edit dir <CR> to open file browser.
" - <CR> - expand, contract.
" - v,t open in v split, new tab.
" - check |netrw-browse-maps| for more mappings
" }}}

" Go ------------------------------------------------------------------------{{{
autocmd BufNewFile,BufRead *.go setlocal noexpandtab tabstop=4 shiftwidth=4
" }}}

" Make search case insensitive
set hlsearch
set incsearch
set ignorecase
set smartcase


" Disable stupid backup and swap files - they trigger too many events
" for file system watchers
set nobackup
set nowritebackup
set noswapfile

" ============================================================================
" Python IDE Setup
" ============================================================================

let NERDTreeIgnore=['^.*\.pyc$', '\~$']
nmap <Leader>x  :NERDTreeToggle<CR>

" Settings for ctrlp
" cd ~/.vim/bundle
" git clone https://github.com/kien/ctrlp.vim.git
let g:ctrlp_max_height = 30
set wildignore+=*.pyc
set wildignore+=*_build/*
set wildignore+=*/coverage/*

" syntastic options

" On by default, turn it off for html
" !!! Install 'sudo pip flake8' to enable python checking
let g:syntastic_mode_map = { 'mode': 'active',
    \ 'active_filetypes': ['python', 'javascript', 'css'],
    \ 'passive_filetypes': ['html', 'go'] }
    " " \ 'active_filetypes': ['go', 'python', 'javascript', 'css'],
    " \ 'passive_filetypes': ['html'] }
" let g:syntastic_go_checkers = ['golint', 'govet']
" let g:syntastic_mode_map = { 'mode': 'active', 'passive_filetypes': ['go'] }
" Use flake8
"let g:syntastic_python_checkers = ['pep8']
let g:syntastic_python_checkers = ['flake8']
"let g:syntastic_python_checkers = ['pyflakes']
"let g:syntastic_python_checkers = ['pylint']
"let g:syntastic_python_flake8_args = '--ignore="E501,E302,E261,E701,E241,E126,E127,E128,W801"'
" E256 - block comment should start with "# " - Incorrectly interpreted on
" raspbian
" [E402] module level import not at top of file [E402]
let g:syntastic_python_flake8_args = '--ignore="E501,W601,E265,E402"'
let g:syntastic_always_populate_loc_list=1
let g:syntastic_auto_loc_list=1

" Create a ropeproject by executing ``:RopeOpenProject``."""
" Add your venv to ``.ropeproject/config.py``!'
" Settings for python-mode
" cd ~/.vim/bundle
" git clone https://github.com/klen/python-mode
"  pymode is being removed
"let g:pymode = 1
"let g:pymode_lint = 1
"let g:pymode_lint_on_write = 1
""let g:pymode_lint_checkers = ['pylint', 'pyflakes'] " :help pymode.txt for more
"let g:pymode_lint_checkers = ['pyflakes'] " :help pymode.txt for more
"let g:pymode_lint_cwindow = 1
"let g:pymode_lint_signs = 1
"
"let g:pymode_virtualenv = 1  " detect virtual env
"let g:pymode_rope = 1
"
"map <Leader>g :call RopeGotoDefinition()<CR>
"" Added by rambul
"map <Leader>j :call RopeShowDoc()<CR>
"let ropevim_enable_shortcuts = 1
"let g:pymode_rope_goto_def_newwin = "vnew"
"let g:pymode_rope_extended_complete = 1
"let g:pymode_breakpoint = 0
"let g:pymode_syntax = 1
"let g:pymode_syntax_builtin_objs = 0
"let g:pymode_syntax_builtin_funcs = 0
"map <Leader>b Oimport ipdb; ipdb.set_trace() # BREAKPOINT<C-c>
"" Added by rambul
"" If .ropeproject not found in current dir, 'True'-Scan all dirs in parent path.
"let g:pymode_rope_guess_project = 0

" Better navigating through omnicomplete option list
" See http://stackoverflow.com/questions/2170023/how-to-map-keys-for-popup-menu-in-vim
set completeopt=longest,menuone
function! OmniPopup(action)
    if pumvisible()
        if a:action == 'j'
            return "\<C-N>"
        elseif a:action == 'k'
            return "\<C-P>"
        endif
    endif
    return a:action
endfunction

""""""""""""""""""YouCompleteMe""""""""""""""""""""""""""""""""""""""""""""""""
" let g:ycm_log_level = "debug"
let g:ycm_complete_in_comments = 1
let g:ycm_collect_identifiers_from_comments_and_strings = 1
let g:ycm_seed_identifiers_with_syntax = 1
" show suggested candidate (from semantic engine) details in a preview window.
" seem to mess UltiSnipsJumpForwardTrigger <c-b>.
" let g:ycm_add_preview_to_completeopt = 1
" let g:ycm_autoclose_preview_window_after_completion = 1
" Exuberant Ctags format is supported.
" let g:ycm_collect_identifiers_from_tags_files = 1
" YouCompleteMe coveres completion navig with <tab>, <s-tab> keys
" inoremap <silent><C-j> <C-R>=OmniPopup('j')<CR>
" inoremap <silent><C-k> <C-R>=OmniPopup('k')<CR>

" added by sam@lf
set foldmethod=indent

" Python folding
" mkdir -p ~/.vim/ftplugin
" wget -O ~/.vim/ftplugin/python_editing.vim http://www.vim.org/scripts/download_script.php?src_id=5492
"set nofoldenable
autocmd! BufNewFile,BufReadPost *.ino,*.pde setlocal ft=arduino
autocmd! BufNewFile,BufReadPost *.tpl setlocal ft=mustache

" enable vim-airline integration with plugins.
let g:airline_enable_fugitive=1
let g:airline_enable_syntastic=1
let g:airline_enable_bufferline=1

""""""""""""""""""""""""""""""""fugitive"""""""""""""""""""""""""""""""""""""""
" fugitive git options
" set diffopt+=vertical
" fugitive git bindings
"autocmd! BufWritePost * :Gstatus " does not work
"nnoremap <space>ga :Git add %:p<CR><CR>
nnoremap <space>gs :Gstatus<CR>
nnoremap <space>gc :Gcommit -v -q<CR>
nnoremap <space>gt :Gcommit -v -q %:p<CR>
nnoremap <space>gd :Gdiff<CR>
"nnoremap <space>ge :Gedit<CR>
nnoremap <space>gr :Gread<CR>
nnoremap <space>gw :Gwrite<CR><CR>
"nnoremap <space>gl :silent! Glog<CR>:bot copen<CR>
"nnoremap <space>gp :Ggrep<Space>
"nnoremap <space>gm :Gmove<Space>
"nnoremap <space>gb :Git branch<Space>
"nnoremap <space>go :Git checkout<Space>
"nnoremap <space>gps :Dispatch! git push<CR>
"nnoremap <space>gpl :Dispatch! git pull<CR>

" next maping doesn't work
"autocmd User fugitive if fugitive#buffer().type() =~# '^\%(tree\|blob\)$' | nnoremap <buffer> .. :edit %:h<CR> | endif

" Auto-clean fugitive bufferes.
autocmd BufReadPost fugitive://* set bufhidden=delete

" Modified by sam@lf
" command! MakeTags !ctags --file-scope=no  -R -f ~/redmoo/auct/.git/tags --exclude=.git ~/redmoo/auct/ ~/Envs/py2.7dj1.10.5/lib/python2.7/site-packages
command! MakeTags !ctags --file-scope=no  -R -f ~/redmoo/auct/.git/tags --exclude=.git ~/redmoo/auct/
" Use ^] to jump to def for tag under cursor
" Use g^] when multiple definitions are possible
" Use ^t to jump back
" Run ctags when saving..
" Edit the location of /path/to/tagsfile
" !!! Run 'ctags --tag-relative=yes --file-scope=no -R -f ~/redmoo/auct/.git/tags --exclude=.git'
" to update tags file
" this  command does not work.
" autocmd BufWritePost *  if filereadable('~/redmoo/auct/.git/tags') | call system('ctags --tag-relative=yes --file-scope=no -R -a -f ~/redmoo/auct/.git/tags --exclude=.git'.expand('%')) | endif

" Added by sam@lf
" limit # of lines displaying match candidates.
let g:ctrlp_max_height=10

" typing {{ transformed to {{_}} where _ indicates cursor placement.
let g:mustache_abbreviations = 1

" enable braceless.vim +indent features
autocmd FileType python BracelessEnable +indent

" added by sam@lf
set cursorline
set cursorcolumn
" Jump open folds to the nearest closed fold
" borrowed from http://stackoverflow.com/questions/9403098/is-it-possible-to-jump-to-closed-folds-in-vim
" nnoremap <silent> <leader>zj :call NextClosedFold('j')<cr>
" nnoremap <silent> <leader>zk :call NextClosedFold('k')<cr>
nnoremap <silent> zj :call NextClosedFold('j')<cr>
nnoremap <silent> zk :call NextClosedFold('k')<cr>
function! NextClosedFold(dir)
    let cmd = 'norm!z' . a:dir
    let view = winsaveview()
    let [l0, l, open] = [0, view.lnum, 1]
    while l != l0 && open
        exe cmd
        let [l0, l] = [l, line('.')]
        let open = foldclosed(l) < 0
    endwhile
    if open
        call winrestview(view)
    endif
endfunction

" open 'tag' in a new tab
nnoremap <Leader>o <C-w><C-]><C-w>T

" vim-go --------------------------------------------------------------------{{{
" vim-go settings
" autocmd FileType go nmap <leader>b  <Plug>(go-build)
" run :GoBuild or :GoTestCompile based on the go file
function! s:build_go_files()
  let l:file = expand('%')
  if l:file =~# '^\f\+_test\.go$'
    call go#test#Test(0, 1)
  elseif l:file =~# '^\f\+\.go$'
    call go#cmd#Build(0)
  endif
endfunction
autocmd FileType go nmap <leader>b :<C-u>call <SID>build_go_files()<CR>

autocmd FileType go nmap <leader>r  <Plug>(go-run)
autocmd FileType go nmap <leader>t  <Plug>(go-test)
autocmd FileType go nmap <Leader>c <Plug>(go-coverage-toggle)
autocmd FileType go nmap <Leader>df :GoDef<CR>
autocmd FileType go nmap <Leader>de :GoDecls<CR>
autocmd FileType go nmap <Leader>dr :GoDeclsDir<CR>
autocmd FileType go nmap <Leader>do :GoDoc<CR>
autocmd FileType go nmap <Leader>di <Plug>(go-info)
autocmd FileType go nmap <Leader>ds :GoDescribe<CR>
autocmd FileType go nmap <Leader>i :GoSameIds<CR>

" Build/Test on save.
augroup auto_go
    autocmd!
    autocmd BufWritePost *.go :GoBuild
    " autocmd BufWritePost *_test.go :GoTest
    " autocmd BufWritePost *.go :GoTest
augroup end
" [q and [q should do the same as the next shortcuts
" map <C-n> :cnext<CR>
" map <C-m> :cprevious<CR>
nnoremap <leader>a :cclose<CR>
" let g:go_list_type = "quickfix"
" let g:go_list_type_commands = {"GoMetaLinter": "quickfix"} " default
" let g:go_list_type_commands = {"GoMetaLinter": "locationlist"}
" vim setting: saves buffer when :make is called.
" so, calling GoBuild write the file out.
set autowrite

let g:go_autodetect_gopath = 0
let g:go_info_mode = "gocode"
" formats go code and manages imports.
let g:go_fmt_command = "goimports"
" stop folding on 'write' as per https://github.com/fatih/vim-go/issues/502
let g:go_fmt_experimental = 1
" you might not want all the highlighting.
let g:go_highlight_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_operators = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_build_constraints = 1

let g:go_metalinter_enabled = ['vet', 'golint', 'errcheck']
let g:go_metalinter_autosave = 1
" linting started and linting finished commands
let g:go_echo_command_info = 0
let g:go_metalinter_autosave_enabled = ['vet', 'golint']
" let g:go_metalinter_autosave_enabled = ['vet']
let g:go_metalinter_deadline = '5s'
let g:ale_go_gometalinter_options =
      \ '--tests ' .
      \ '--fast ' .
      \ '--disable=gotype ' .
      \ '--disable=gotypex ' .
      \ '--exclude="should have comment" ' .
      \ '--exclude="error return value not checked \(defer"'
" let g:go_auto_type_info = 1 " shows signature of fn under cursor
" let g:go_auto_sameids = 1 " too slow
let g:go_gocode_unimported_packages = 1

" Toggle alternate files, code and test files.
autocmd Filetype go command! -bang A call go#alternate#Switch(<bang>0, 'edit')
" autocmd Filetype go command! -bang AV call go#alternate#Switch(<bang>0, 'vsplit')
" autocmd Filetype go command! -bang AS call go#alternate#Switch(<bang>0, 'split')
" autocmd Filetype go command! -bang AT call go#alternate#Switch(<bang>0, 'tabe')
" Install plugins.
" }}}

""""""""""""""""""UltiSnips""""""""""""""""""""""""""""""""""""""""""""""""""""
" let g:UltiSnipsSnippetsDir        = '~/.vim/snippets/'
let g:UltiSnipsSnippetDirectories = ['UltiSnips',]
autocmd FileType gohtmltmpl UltiSnipsAddFiletypes gohtmltmpl.html.javascript-jquery

" ultisnip shortcuts
let g:UltiSnipsExpandTrigger       = '<c-j>'
let g:UltiSnipsJumpForwardTrigger  = '<c-b>'
" default JumpBackward is '<c-k>'
" let g:UltiSnipsJumpBackwardTrigger = '<c-z>'

" vim-sneak -----------------------------------------------------------------{{{
" press 's'|'f'|'t' again to move to the next match.
let g:sneak#s_next = 1
" 1 : Case sensitivity is determined by 'ignorecase' and 'smartcase'.
let g:sneak#use_ic_scs = 1
map f <Plug>Sneak_f
map F <Plug>Sneak_F
map t <Plug>Sneak_t
map T <Plug>Sneak_T
" }}}

" Plugins--------------------------------------------------------------------{{{
" Run :PlugInstall after adding plugin to the list.
" Run :PlugUpdate to update plugin.
call plug#begin()
Plug 'vim-airline/vim-airline'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'scrooloose/syntastic'
Plug 'pangloss/vim-javascript'
" Setting up React JSX syntax highlighting and indenting
" Plug 'mxw/vim-jsx'
Plug 'tmhedberg/SimpylFold'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-dispatch'
Plug 'tweekmonster/braceless.vim'
Plug 'jeetsukumaran/vim-indentwise'
" Plug 'pearofducks/ansible-vim'
Plug 'mustache/vim-mustache-handlebars'
Plug 'vim-scripts/ReplaceWithRegister'
Plug 'michaeljsmith/vim-indent-object'
Plug 'fatih/vim-go', { 'do': ':GoInstallBinaries' }
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
Plug 'AndrewRadev/splitjoin.vim'
" Plug 'fatih/molokai'
" Plug 'Valloric/YouCompleteMe'
Plug 'airblade/vim-gitgutter'
Plug 'justinmk/vim-sneak'
Plug 'scrooloose/nerdtree'
call plug#end()
" }}}


" Fold, gets it's own section  ----------------------------------------------{{{
" credit to Mike Hartington https://github.com/mhartington/dotfiles/
  function! MyFoldText() " {{{
      let line = getline(v:foldstart)
      let nucolwidth = &fdc + &number * &numberwidth
      let windowwidth = winwidth(0) - nucolwidth - 3
      let foldedlinecount = v:foldend - v:foldstart

      " expand tabs into spaces
      let onetab = strpart('          ', 0, &tabstop)
      let line = substitute(line, '\t', onetab, 'g')

      let line = strpart(line, 0, windowwidth - 2 -len(foldedlinecount))
      " let fillcharcount = windowwidth - len(line) - len(foldedlinecount) - len('lines')
      " let fillcharcount = windowwidth - len(line) - len(foldedlinecount) - len('lines   ')
      let fillcharcount = windowwidth - len(line)
      " return line . '…' . repeat(" ",fillcharcount) . foldedlinecount . ' Lines'
      return line . '…'. repeat(" ",fillcharcount)
  endfunction " }}}

  set foldtext=MyFoldText()

  autocmd InsertEnter * if !exists('w:last_fdm') | let w:last_fdm=&foldmethod | setlocal foldmethod=manual | endif
  autocmd InsertLeave,WinLeave * if exists('w:last_fdm') | let &l:foldmethod=w:last_fdm | unlet w:last_fdm | endif

  " autocmd FileType vim setlocal fdc=1
  set foldlevel=99

  " Space to toggle folds.
  "nnoremap <Space> za
  "vnoremap <Space> za
  autocmd FileType vim setlocal foldmethod=marker
  autocmd FileType vim setlocal foldlevel=0

  autocmd FileType javascript,html,css,scss,typescript setlocal foldlevel=99

  autocmd FileType css,scss,json setlocal foldmethod=marker
  autocmd FileType css,scss,json setlocal foldmarker={,}

  autocmd FileType coffee setl foldmethod=indent
  let g:xml_syntax_folding = 1
  autocmd FileType xml setl foldmethod=syntax

  autocmd FileType html setl foldmethod=expr
  autocmd FileType html setl foldexpr=HTMLFolds()

  " autocmd FileType javascript,typescript,json setl foldmethod=syntax
  autocmd FileType javascript,typescript,typescriptreact,json setl foldmethod=syntax

" }}}

" ## added by OPAM user-setup for vim / base ## 93ee63e278bdfc07d1139a748ed3fff2 ## you can edit, but keep this line
let s:opam_share_dir = system("opam config var share")
let s:opam_share_dir = substitute(s:opam_share_dir, '[\r\n]*$', '', '')

let s:opam_configuration = {}

function! OpamConfOcpIndent()
  execute "set rtp^=" . s:opam_share_dir . "/ocp-indent/vim"
endfunction
let s:opam_configuration['ocp-indent'] = function('OpamConfOcpIndent')

function! OpamConfOcpIndex()
  execute "set rtp+=" . s:opam_share_dir . "/ocp-index/vim"
endfunction
let s:opam_configuration['ocp-index'] = function('OpamConfOcpIndex')

function! OpamConfMerlin()
  let l:dir = s:opam_share_dir . "/merlin/vim"
  execute "set rtp+=" . l:dir
endfunction
let s:opam_configuration['merlin'] = function('OpamConfMerlin')

let s:opam_packages = ["ocp-indent", "ocp-index", "merlin"]
let s:opam_check_cmdline = ["opam list --installed --short --safe --color=never"] + s:opam_packages
let s:opam_available_tools = split(system(join(s:opam_check_cmdline)))
for tool in s:opam_packages
  " Respect package order (merlin should be after ocp-index)
  if count(s:opam_available_tools, tool) > 0
    call s:opam_configuration[tool]()
  endif
endfor
" ## end of OPAM user-setup addition for vim / base ## keep this line
" ## added by OPAM user-setup for vim / ocp-indent ## dbe77e3c100c6fc68b400e510053d1be ## you can edit, but keep this line
if count(s:opam_available_tools,"ocp-indent") == 0
  source "/home/sam/.opam/4.10.0/share/ocp-indent/vim/indent/ocaml.vim"
endif
" ## end of OPAM user-setup addition for vim / ocp-indent ## keep this line
