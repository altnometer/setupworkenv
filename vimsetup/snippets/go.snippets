# neosnippet-snippet-syntax which is similar to snipMate syntax.

# # oe -> os.Exit(1)
# snippet "oe"  "os.Exit(...)" r
# os.Exit(${1:1})
# endsnippet

# # wr -> w http.ResponseWriter, r *http.Request)
# snippet "wr"  "w http.ResponseWriter, r *http.Request)" r
# w http.ResponseWriter, r *http.Request)
# endsnippet
snippet     wr
abbr        w http.ResponseWriter, r *http.Request
# alias fn
options     word
  w http.ResponseWriter, r *http.Request

# same as 'honza/vim-snippets/snippets/go.snippets'
# but without ${0} place holder
snippet fum "mymethod"
  func (${1:receiver} ${2:type}) ${3:funcName}(${4}) ${5:error} {
    ${6}
  }

snippet errm "if err != nil { log.Printf }"
  if err != nil {
    ${1:log.Printf("${2\}"${3:, err\})}
  }${0}

snippet errf "if err != nil { log.Fatal }"
  if err != nil {
    log.Fatal(${1:"${2\}"}${3:, err})
  }${0}

snippet lft "log.Fatal"
  log.Fatal(${1:"${2\}"}${3:, err})${0}

# goroutine anonymous function
snippet gom
abbr go func(...) { ... }(...)
	go func(${1}) {
		${0:TARGET}
	}(${2})

# overrides default.
snippet fumh "http handler function on reciever"
	func (${1:receiver} ${2:type}) ${3:ServeHTTP}(${4:w} http.ResponseWriter, ${5:r} *http.Request) {
		${0:${VISUAL}}
	}
