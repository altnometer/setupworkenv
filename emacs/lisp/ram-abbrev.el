;; -*- coding: utf-8; lexical-binding: t; -*-

;; credit to http://ergoemacs.org/emacs/emacs_abbrev_mode.html

(clear-abbrev-table global-abbrev-table)

(define-abbrev-table 'global-abbrev-table
  '(
    ;; net addrev
    ("ca" "calculate")
    ("cad" "calculated")
    ("cag" "calculating")
    ("cas" "calculates")
    ("bn" "between")
    ("ty" "thank you")
    ("dft" "different")
    ("dfc" "difference")))

(when (boundp 'clojure-mode-abbrev-table)
  (clear-abbrev-table clojure-mode-abbrev-table))

(define-abbrev-table 'clojure-mode-abbrev-table
  '(
    ("df" "defn")
    ("dm" "defmacro")
    ("dt" "deftest")
    ("ts" "testing")
    ("me" "macroexpand-1")
    ("pr" "println")
    ))

(when (boundp 'org-mode-abbrev-table)
  (clear-abbrev-table org-mode-abbrev-table))

(define-abbrev-table 'org-mode-abbrev-table
  '(
    ("1t" "first")
    ("2d" "second")
    ("3d" "third")
    ("ap" "application")
    ("aps" "applications")
    ("al" "algorithm")
    ("ar" "argument")
    ("ars" "arguments")

    ("ch" "chapter")
    ("chs" "chapters")
    ("bc" "because")
    ("bh" "behavior")
    ("cj" "Clojure")
    ("cjs" "ClojureScript")
    ("cl" "collection")
    ("cls" "collections")
    ("co" "computation")
    ("df" "different")
    ("dfc" "difference")
    ("dfl" "differently")
    ("dft" "differentiate")
    ("dt" "difficult")
    ("dty" "difficulty")
    ("ex" "expression")
    ("exs" "expressions")
    ("el" "example")
    ("els" "examples")
    ("ev" "evaluate")
    ("evs" "evaluates")
    ("evd" "evaluated")
    ("evg" "evaluating")
    ("evn" "evaluation")
    ("et" "element")
    ("ets" "elements")
    ("fn" "function")
    ("fns" "functions")
    ("fnl" "functional")
    ("fnt" "functionality")
    ("lg" "language")
    ("lgs" "languages")
    ("id" "identity")
    ("imm" "immutable")
    ("immy" "immutability")
    ("imd" "implemented")
    ("img" "implementing")
    ("imp" "implementation")
    ("imps" "implementations")
    ("imt" "implement")
    ("ims" "implements")
    ("js" "JavaScript")
    ("kw" "keyword")
    ("kws" "keywords")
    ("ma" "macros")
    ("me" "mechanism")
    ("mes" "mechanisms")
    ("min" "minimum")
    ("mu" "mutation")
    ("ns" "namespace")
    ("nss" "namespaces")
    ("ob" "object")
    ("obs" "objects")
    ("oo" "object-oriented")
    ("par" "parameter")
    ("pars" "parameters")
    ("pg" "program")
    ("pgs" "programs")
    ("pgg" "programming")
    ("pr" "previous")
    ("prl" "previously")
    ("pp" "property")
    ("pps" "properties")
    ("pt" "persistent")
    ("ptl" "persistently")
    ("ptc" "persistence")
    ("re" "represent")
    ("red" "represented")
    ("reg" "representing")
    ("ret" "representation")
    ("rets" "representations")
    ("rn" "return")
    ("rnd" "returned")
    ("rng" "returning")
    ("rns" "returns")
    ("sd" "should")
    ("sdt" "shouldn't")
    ("sq" "sequence")
    ("sql" "sequential")
    ("sqls" "sequentials")
    ("sqs" "sequences")
    ("sl" "symbol")
    ("sls" "symbols")
    ("sp" "specific")
    ("st" "structure")
    ("stl" "structural")
    ("sts" "structures")
    ("un" "understand")
    ("ung" "understanding")
    ("ur" "you are")
    ("uv" "you've")))
;; => nil


(set-default 'abbrev-mode t)

(setq save-abbrevs nil)
