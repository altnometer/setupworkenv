# Generated by iptables-save v1.4.21 on Fri Jan  1 16:18:05 2016
#*filter
#:INPUT ACCEPT [0:0]
#:FORWARD ACCEPT [0:0]
#:OUTPUT ACCEPT [1150:177754]
#-A INPUT -i lo -j ACCEPT
#-A INPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
#-A INPUT -p tcp -m tcp --dport 22 -j ACCEPT
#-A INPUT -j DROP
#COMMIT
## Completed on Fri Jan  1 16:18:06 2016
*nat
:PREROUTING ACCEPT [98:7017]
:INPUT ACCEPT [98:7017]
:OUTPUT ACCEPT [399:29314]
:POSTROUTING ACCEPT [399:29314]
:DOCKER - [0:0]
-A PREROUTING -m addrtype --dst-type LOCAL -j DOCKER
-A OUTPUT ! -d 127.0.0.0/8 -m addrtype --dst-type LOCAL -j DOCKER
-A POSTROUTING -s 172.17.0.0/16 ! -o docker0 -j MASQUERADE
-A DOCKER -i docker0 -j RETURN
COMMIT

* filter
# allow all outgoing, but drop incoming and forwarding packets by default
:INPUT DROP [0:0]
:FORWARD DROP [0:0]
:OUTPUT ACCEPT [0:0]

# Custom per protocol chains
:UDP - [0:0]
:TCP - [0:0]
:ICMP - [0:0]

:DOCKER - [0:0]
:DOCKER-ISOLATION - [0:0]
:DOCKER-USER - [0:0]
-A FORWARD -j DOCKER-USER
-A FORWARD -j DOCKER-ISOLATION
-A FORWARD -o docker0 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
-A FORWARD -o docker0 -j DOCKER
-A FORWARD -i docker0 ! -o docker0 -j ACCEPT
-A FORWARD -i docker0 -o docker0 -j ACCEPT
-A DOCKER-ISOLATION -j RETURN
-A DOCKER-USER -j RETURN
# Accept UDP trafic

# Accept TCP trafic
-A TCP -p tcp --dport 22 -s 0/0 -j ACCEPT

## Add -dport 80 rules after next line, keep the line for reference.
#-A TCP -p tcp --dport 80 -j ACCEPT
# Accept packets to memcached on port  -d (replace with the ip memcached is
# bound to).
#-A TCP -p tcp --dport 11211 -d 188.226.202.76 -j ACCEPT

# Accept ICMP trafic

# Boilerplate acceptance policy
-A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
-A INPUT -i lo -j ACCEPT

# Drop invalid packets
-A INPUT -m conntrack --ctstate INVALID -j DROP

#
# Drop packages spoofed to have server ip as source to stop cyclical handling.
# Insert rules by setupnewserveriptables.sh after next line.
#-A INPUT -i eth0 -s ${SERVER_IP} -j DROP
#
# Drop packages maliciously claiming lo interface as source.
# sam@lf disabled as needed for docker networking.
# -A INPUT -i eth0 -s "127.0.0.0/8" -j DROP
# Pass traffic to protocol specific chains
## Only allow new connections (established and related should already be handled)
## For TCP, additionally, allow only new SYN packets, since it is the only valid
## method for establishing a new TCP connection.
-A INPUT -p tcp --syn -m conntrack --ctstate NEW -j TCP
-A INPUT -p udp -m conntrack --ctstate NEW -j UDP
-A INPUT -p icmp -m conntrack --ctstate NEW -j ICMP

# Added by 'ram', based on digital ocean tutorial.
# in no udp traffic handled by UDP chain then imitate ICMP 'port unreachanble' messege.
-A INPUT -p udp -j REJECT --reject-with icmp-port-unreachable
# default INPUT DROPT will handle it
-A INPUT -p tcp -j REJECT --reject-with tcp-reset
# all other packets send ICMP 'protocol unreachable' messege to say
# the server does not respond to packets of that type.
-A INPUT -j REJECT --reject-with icmp-port-unreachable

# Commit the changes
COMMIT

*raw
:PREROUTING ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
COMMIT

*security
:INPUT ACCEPT [0:0]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
COMMIT

*mangle
:PREROUTING ACCEPT [0:0]
:INPUT ACCEPT [0:0]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
:POSTROUTING ACCEPT [0:0]
COMMIT
